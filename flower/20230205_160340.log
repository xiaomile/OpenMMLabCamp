2023-02-05 16:03:40,523 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 16:03:40,524 - mmcls - INFO - Distributed training: False
2023-02-05 16:03:40,623 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower/train.txt',
        classes='data/flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower/val',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0bbt/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work_dir/resnet18_b16_flower'
gpu_ids = [0]

2023-02-05 16:03:40,649 - mmcls - INFO - Set random seed to 1289349431, deterministic: False
2023-02-05 16:03:41,057 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 16:03:41,244 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 16:03:59,012 - mmcls - INFO - load checkpoint from local path: /HOME/scz0bbt/run/mmclassification/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 16:03:59,221 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 16:03:59,222 - mmcls - INFO - Start running, host: scz0bbt@g0099, work_dir: /data/run01/scz0bbt/mmclassification/mmclassification/work_dir/resnet18_b16_flower
2023-02-05 16:03:59,222 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 16:03:59,222 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 16:03:59,222 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0bbt/mmclassification/mmclassification/work_dir/resnet18_b16_flower by HardDiskBackend.
2023-02-05 16:04:29,735 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 16:04:34,219 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-05 16:04:39,631 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 16:04:40,607 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.6084, accuracy_top-5: 100.0000
2023-02-05 16:04:46,039 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 16:04:47,002 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 16:04:52,413 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 16:04:53,380 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-05 16:04:58,794 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 16:04:59,771 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 91.7832, accuracy_top-5: 100.0000
2023-02-05 16:05:05,171 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 16:05:06,130 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000
2023-02-05 16:05:11,502 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 16:05:12,463 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-05 16:05:17,873 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 16:05:18,841 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-05 16:05:24,230 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 16:05:25,192 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-05 16:05:30,609 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 16:05:31,569 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-05 16:05:36,965 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 16:05:37,934 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-05 16:05:43,348 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 16:05:44,320 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-05 16:05:49,721 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 16:05:50,688 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000
2023-02-05 16:05:56,053 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 16:05:57,017 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 16:06:02,446 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 16:06:03,414 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:06:08,813 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 16:06:09,785 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:06:15,193 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 16:06:16,159 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:06:21,537 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 16:06:22,508 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 16:06:27,918 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 16:06:28,881 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:06:34,240 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 16:06:35,201 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:06:40,603 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 16:06:41,579 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 16:06:46,954 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 16:06:47,924 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 16:06:53,341 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 16:06:54,307 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 16:06:59,701 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 16:07:00,671 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:07:06,019 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 16:07:06,995 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:07:12,367 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 16:07:13,331 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:07:18,782 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 16:07:19,751 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 16:07:25,128 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 16:07:26,095 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:07:31,506 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 16:07:32,474 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:07:37,837 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 16:07:38,810 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-05 16:07:44,194 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 16:07:45,159 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:07:50,543 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 16:07:51,520 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:07:56,912 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 16:07:57,890 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:08:03,280 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 16:08:04,249 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 16:08:09,648 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 16:08:10,619 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:08:16,031 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 16:08:17,001 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:08:22,372 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 16:08:23,345 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:08:28,721 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 16:08:29,712 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:08:35,108 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 16:08:36,079 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:08:41,464 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 16:08:42,432 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:08:47,825 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 16:08:48,799 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:08:54,170 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 16:08:55,148 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:09:00,591 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 16:09:01,555 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:09:06,982 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 16:09:07,966 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:09:13,373 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 16:09:14,349 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:09:19,763 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 16:09:20,725 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:09:26,110 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 16:09:27,072 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:09:32,470 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 16:09:33,436 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:09:38,801 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 16:09:39,776 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:09:45,176 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 16:09:46,168 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:09:51,571 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 16:09:52,546 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 16:09:57,959 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 16:09:58,932 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:10:04,344 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 16:10:05,317 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:10:10,707 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 16:10:11,677 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 16:10:17,064 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 16:10:18,037 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:10:23,432 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 16:10:24,396 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:10:29,749 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 16:10:30,715 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:10:36,072 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 16:10:37,030 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:10:42,447 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 16:10:43,417 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:10:48,833 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 16:10:49,805 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:10:55,170 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 16:10:56,147 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:11:01,540 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 16:11:02,507 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:11:07,884 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 16:11:08,853 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:11:14,218 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 16:11:15,180 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:11:20,547 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 16:11:21,517 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:11:26,898 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 16:11:27,868 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:11:33,270 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 16:11:34,229 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:11:39,651 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 16:11:40,621 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:11:46,011 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 16:11:46,972 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:11:52,349 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 16:11:53,314 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:11:58,705 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 16:11:59,677 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:12:05,078 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 16:12:06,040 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:12:11,455 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 16:12:12,422 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:12:17,826 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 16:12:18,797 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:12:24,206 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 16:12:25,172 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:12:30,566 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 16:12:31,540 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 16:12:36,914 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 16:12:37,889 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:12:43,292 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 16:12:44,252 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:12:49,661 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 16:12:50,632 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:12:56,018 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 16:12:56,983 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:13:02,361 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 16:13:03,334 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:13:08,701 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 16:13:09,675 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 16:13:15,053 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 16:13:16,019 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:13:21,463 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 16:13:22,432 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:13:27,860 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 16:13:28,832 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:13:34,247 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 16:13:35,212 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:13:40,649 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 16:13:41,626 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:13:47,056 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 16:13:48,034 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 16:13:53,420 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 16:13:54,393 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 16:13:59,800 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 16:14:00,769 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:14:06,136 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 16:14:07,103 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:14:12,508 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 16:14:13,473 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:14:18,923 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 16:14:19,894 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:14:25,285 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 16:14:26,248 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:14:31,655 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 16:14:32,618 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:14:37,994 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 16:14:38,962 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:14:44,391 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 16:14:45,367 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:14:50,756 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 16:14:51,718 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:14:57,131 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 16:14:58,095 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 16:15:03,541 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 16:15:04,504 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
